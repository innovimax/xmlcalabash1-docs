<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="running" version="5.0">
<title>Running XML Calabash</title>

<para>This chapter describes how to run <citetitle>XML
Calabash</citetitle> from the command-line. If you're using the
processor embedded in some other application, please consult the
documentation for that application for details about how to run and
control it.</para>

<section xml:id="javasetup">
<title>Setting up the environment</title>

<para>You must have Java 1.7 or later installed in order to run
<citetitle>XML Calabash</citetitle>.</para>

<para>In addition to Java, you need a set of jar files on your
classpath. At a minimum, you need to include the
<filename>calabash.jar</filename> file and the jar files in the
<filename class="directory">lib</filename> directory of the
distribution.</para>

<para>Starting with version 1.1.0, <citetitle>XML Calabash</citetitle>
has been broken into several modules:</para>

<variablelist>
<varlistentry><term>deltaxml</term>
<listitem>
<para>Supports the <link xlink:href="http://www.deltaxml.com/">Delta XML</link>
comparison step. You'll also need the commercial <citetitle>Delta XML</citetitle>
jars and a license.</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-deltaxml"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>ditaa</term>
<listitem>
<para>Supports the
<link xlink:href="http://sourceforge.net/projects/ditaa/">ditaa</link>
drawing step.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-ditaa"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>mathml-to-svg</term>
<listitem>
<para>Supports MathML to SVG conversions with the
<link xlink:href="http://sourceforge.net/projects/jeuclid/">JEuclid</link>
renderer.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-mathml-to-svg"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>metadata-extractor</term>
<listitem>
<para>Supports the image metadata extractions step with the
<link xlink:href="https://drewnoakes.com/code/exif/">Metadata Extractor</link>
library.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-metadata-extractor"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>plantuml</term>
<listitem>
<para>Supports the
<link xlink:href="http://sourceforge.net/projects/plantuml/">PlantUML</link>
drawing step.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-plantuml"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>print</term>
<listitem>
<para>Supports printing with
<link xlink:href="http://www.w3.org/standards/techs/xsl#w3c_all">XSL
Formatting Objects</link>
or
<link xlink:href="http://www.w3.org/Style/CSS/">CSS</link>.
Support is included for XSL FO processing with
<link xlink:href="https://xmlgraphics.apache.org/fop/">FOP</link>,
<link xlink:href="http://www.antennahouse.com/antenna1/xsl-specification/">AntennaHouse</link>,
or
<link xlink:href="http://www.renderx.com/">RenderX</link>
and CSS processing with
<link xlink:href="http://www.antennahouse.com/antenna1/css/">AntennaHouse</link>,
or
<link xlink:href="http://www.princexml.com/">PrinceXML</link>.
</para>
<para>Printing with XML Calabash requires the libraries in this module
in addition to any commercial libraries and licences required. (No
additional libraries are required for FOP.)</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-print"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>rdf</term>
<listitem>
<para>Supports the extension steps that can read, write, and query
<link xlink:href="http://www.w3.org/RDF/">RDF</link>.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-rdf"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>sendmail</term>
<listitem>
<para>Supports the step that sends email.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-sendmail"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>xcc</term>
<listitem>
<para>Supports the
<link xlink:href="http://www.marklogic.com/">MarkLogic</link>
XCC steps.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-xcc"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>xmlunit</term>
<listitem>
<para>Supports XML comparison with the
<link xlink:href="http://www.xmlunit.org/">XMLUnit</link> library.
</para>
<para>Available from <link xlink:href="http://github.com/ndw/xmlcalabash1-xmlunit"/>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>To use any of these modules, simply download them (or get them
<link xlink:href="https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.xmlcalabash%22">through Maven</link>) and place them on your classpath. No other
configuration is necessary.</para>

<para>With the introduction of modules, <citetitle>XML Calabash</citetitle>
version numbers move somewhat in the direction of
<emphasis>semantic versioning</emphasis>. Modules with version numbers
of the form 1.1.<replaceable>x</replaceable> are designed to work with
<citetitle>XML Calabash</citetitle> version 1.1.<replaceable>x</replaceable>,
modules with version numbers
of the form 1.2.<replaceable>x</replaceable> with
<citetitle>XML Calabash</citetitle> version 1.2.<replaceable>x</replaceable>,
etc.</para>

<para>Assuming you have the appropriate jar files on your classpath, you can run
<citetitle>XML Calabash</citetitle> like this:</para>

<screen>java <replaceable>java-options</replaceable> com.xmlcalabash.drivers.Main <replaceable>xml-calabash-options</replaceable> <replaceable>pipeline.xpl</replaceable></screen>

<para>For example:</para>

<screen><prompt>$</prompt> <userinput>cd calabash-<replaceable>version</replaceable></userinput>
<prompt>$</prompt> <userinput>java -jar calabash.jar xpl/pipe.xpl</userinput>
<computeroutput>&lt;doc xmlns:p="http://www.w3.org/ns/xproc"&gt;
Congratulations! You've run your first pipeline!
&lt;/doc&gt;</computeroutput></screen>

<para>You can use
<option>-i <replaceable>port</replaceable>=<replaceable>uri</replaceable></option>
to change the inputs and
<option>-o <replaceable>port</replaceable>=<replaceable>file</replaceable></option>
to change the output location.</para>

<para>For example:</para>

<screen><prompt>$</prompt> <userinput>java -jar calabash.jar -i source=xpl/pipe.xpl -o result=/tmp/out.xml xpl/pipe.xpl</userinput></screen>

<para>That will run <filename>xpl/pipe.xpl</filename> using <filename>xpl/pipe.xpl</filename>
as the input and writing the result to <filename>/tmp/out.xml</filename>.</para>

<para>If you run java -jar calabash.jar with no options, it will
print a short usage summary.</para>

<para>Throughout this book, we assume that the command <replaceable>calabash</replaceable>
will run Java with the correct class path and other arguments.</para>
</section>

<section xml:id="cmdline">
<title>The command line</title>

<para>The following synopsis describes the <citetitle>XML Calabash</citetitle> command line:</para>

<cmdsynopsis>
  <command><replaceable>calabash</replaceable></command>
  <arg>
    <group choice="req">
      <arg choice="plain">-P</arg>
      <arg choice="plain">--saxon-processor</arg>
    </group>
    <group choice="req">
      <arg choice="plain">he</arg>
      <arg choice="plain">pe</arg>
      <arg choice="plain">ee</arg>
    </group>
  </arg>
  <arg>--saxon-configuration <replaceable>file</replaceable></arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-a</arg>
      <arg choice="plain">--schema-aware</arg>
    </group>
  </arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-D</arg>
      <arg choice="plain">--debug</arg>
    </group>
  </arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-v</arg>
      <arg choice="plain">--version</arg>
    </group>
  </arg>
  <arg>--profile <replaceable>file</replaceable></arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-S</arg>
      <arg choice="plain">--safe-mode</arg>
    </group>
  </arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-c</arg>
      <arg choice="plain">--config</arg>
    </group>
    <replaceable>configfile</replaceable>
  </arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-G</arg>
      <arg choice="plain">--log-style</arg>
    </group>
    <group choice="req">
      <arg choice="plain">off</arg>
      <arg choice="plain">plain</arg>
      <arg choice="plain">wrapped</arg>
      <arg choice="plain">directory</arg>
    </group>
  </arg>
  <sbr/>
  <arg>
    <group choice="req">
      <arg choice="plain">-E</arg>
      <arg choice="plain">--entity-resolver</arg>
    </group>
    <replaceable>className</replaceable>
  </arg>
  <arg>
    <group choice="req">
      <arg choice="plain">-U</arg>
      <arg choice="plain">--uri-resolver</arg>
    </group>
    <replaceable>className</replaceable>
  </arg>
  <arg rep="repeat">
    <group choice="req">
      <arg choice="plain">-X</arg>
      <arg choice="plain">--extension</arg>
    </group>
    <group choice="req">
      <arg choice="plain">general-values</arg>
      <arg choice="plain">xpointer-on-text</arg>
      <arg choice="plain">
        <group choice="req">
          <arg choice="plain">use-xslt-1.0</arg>
	  <arg choice="plain">use-xslt-10</arg>
        </group>
      </arg>
      <arg choice="plain">transparent-json</arg>
      <arg choice="plain">json-flavor=<replaceable>flavor</replaceable></arg>
    </group>
  </arg>
  <sbr/>
  <arg rep="repeat">
    <group choice="req">
      <arg choice="plain">-b</arg>
      <arg choice="plain">--binding</arg>
    </group>
    <replaceable>prefix</replaceable>=<replaceable>uri</replaceable>
  </arg>
  <arg rep="repeat">
    <group choice="req">
      <arg choice="plain">-p</arg>
      <arg choice="plain">--with-param</arg>
    </group>
    <arg choice="opt"><replaceable>port</replaceable>@</arg><replaceable>param</replaceable>=<replaceable>value</replaceable>
  </arg>
  <sbr/>
  <arg rep="repeat">
    <group choice="req">
      <arg choice="plain">-i</arg>
      <arg choice="plain">--input</arg>
    </group>
    <arg choice="opt"><replaceable>port</replaceable>=</arg><replaceable>uri</replaceable>
  </arg>
  <arg rep="repeat">
    <group choice="req">
      <arg choice="plain">-d</arg>
      <arg choice="plain">--data-input</arg>
    </group>
    <arg choice="opt"><replaceable>contentType</replaceable>@</arg><arg choice="opt"><replaceable>port</replaceable>=</arg><replaceable>uri</replaceable>
  </arg>
  <arg rep="repeat">
    <group choice="req">
      <arg choice="plain">-o</arg>
      <arg choice="plain">--output</arg>
    </group>
    <arg choice="opt"><replaceable>port</replaceable>=</arg><replaceable>uri</replaceable>
  </arg>
  <arg rep="repeat"><replaceable>option</replaceable>=<replaceable>value</replaceable></arg>
  <sbr/>
  <group choice="opt">
    <arg choice="opt">
      <arg rep="repeat">
        <group choice="req">
          <arg choice="plain">-l</arg>
          <arg choice="plain">--library</arg>
        </group>
        <replaceable>library.xpl</replaceable>
      </arg>
      <arg choice="opt" rep="repeat">
        <arg rep="repeat">
          <group choice="req">
            <arg choice="plain">-p</arg>
            <arg choice="plain">--with-param</arg>
          </group>
          <arg choice="opt"><replaceable>port</replaceable>@</arg><replaceable>param</replaceable>=<replaceable>value</replaceable>
        </arg>
        <arg rep="repeat">
          <group choice="req">
            <arg choice="plain">-i</arg>
            <arg choice="plain">--input</arg>
          </group>
          <arg choice="opt"><replaceable>port</replaceable>=</arg><replaceable>uri</replaceable>
        </arg>
        <arg rep="repeat">
          <group choice="req">
            <arg choice="plain">-d</arg>
            <arg choice="plain">--data-input</arg>
          </group>
          <arg choice="opt"><replaceable>port</replaceable>=</arg><replaceable>uri</replaceable>
        </arg>
        <arg rep="repeat">
          <group choice="req">
            <arg choice="plain">-s</arg>
            <arg choice="plain">--step</arg>
          </group>
          <replaceable>steptype</replaceable>
        </arg>
        <arg rep="repeat"><replaceable>option</replaceable>=<replaceable>value</replaceable></arg>
      </arg>
    </arg>
    <arg choice="opt">
      <arg choice="plain"><replaceable>pipeline-uri</replaceable></arg>
      <arg rep="repeat"><replaceable>option</replaceable>=<replaceable>value</replaceable></arg>
    </arg>
  </group>
</cmdsynopsis>

<para>See <xref linkend="configuration"/> for a description of these arguments and what they
mean.</para>

<para>There are three different ways to select the pipeline to run: you can specify the URI of
the pipeline document on the commandline, you can specify one or more step types on the commandline,
or you can specify the URI of the pipeline document in the configfile.</para>
</section>

<section xml:id="help">
<title>What do I do if it all goes wrong?</title>

<para>Tell Norm, <link xlink:href="mailto:ndw@nwalsh.com">ndw@nwalsh.com</link>.
There is also an XProc developers mailing list,
<link xlink:href="http://markmail.org/search/?q=list%3Axproc-dev">xproc-dev@lists.w3.org</link>
which may provide useful advice.</para>
</section>

</chapter>
