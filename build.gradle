buildscript {
  repositories {
    mavenCentral()
    maven { url "http://maven.restlet.org" }
    maven { url "http://developer.marklogic.com/maven2" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  dependencies {
    classpath fileTree(dir: 'lib').include("*.jar")
    classpath 'com.xmlcalabash:xmlcalabash:1.0.32-96'
    classpath 'com.xmlcalabash:xmlcalabash1-ditaa:1.0.1'
    classpath 'net.sf.saxon:Saxon-HE:9.6.0-4'
  }
}

plugins {
  id "java"
  id "de.undercouch.download" version "1.2"
}

repositories {
  mavenCentral()
  maven { url "http://maven.restlet.org" }
  maven { url "http://developer.marklogic.com/maven2" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.name == 'slf4j-log4j12') {
      details.useTarget "org.apache.logging.log4j:log4j-slf4j-impl:2.1"
    }
  }
}

dependencies {
  compile fileTree(dir: 'lib').include("*.jar")
  compile (
    [group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.0.32-96'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash1-ditaa', version: '1.0.1'],
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.6.0-4'],
    [group: 'org.docbook', name: 'docbook-xsl-java-saxon', version: '1.2.0-96'],
  )
}

import de.undercouch.gradle.tasks.download.Download
// import com.xmlcalabash.drivers.Main

project.ext.docbookXslt = "docbook-xslt2-$docbookXsltVersion"

task downloadDocBook(type: Download) {
  src docbookXsltBaseUri + '/release/' + docbookXsltVersion + '/' + docbookXslt + '.zip'
  dest new File(buildDir, docbookXslt + '.zip')
}
downloadDocBook.onlyIf { !file("$buildDir/${docbookXslt}.zip").exists() }

task setupDocBook(dependsOn: downloadDocBook, type: Copy) {
  from zipTree(downloadDocBook.dest)
  into { "build" }
  doLast {
    copy {
      from "build/$docbookXslt"
      into 'build/docbook'
    }
  }
}
setupDocBook.onlyIf { !file("$buildDir/docbook").exists() }

/*
class CalabashFormatBookTask extends DefaultTask {
  @TaskAction
  def calabashAction() {
    def args = [
        '-D',
        '-Xxpointer-on-text',
        '-isource=src/ref.xml',
        'style/format.xpl'
    ]

    Main.main(args as String[])
  }
}

task formatBook(dependsOn: setupDocBook, type: CalabashFormatBookTask) {
*/

task formatBook(dependsOn: setupDocBook, type: JavaExec) {
  classpath = configurations.compile
  main = 'com.xmlcalabash.drivers.Main'
  args('-D',
       '-Xxpointer-on-text',
       '-isource=src/ref.xml',
       'style/format.xpl')
}
formatBook.onlyIf { !file("$buildDir/ref/index.html").exists() }

task copyCSS(type: Copy) {
  from 'css'
  into 'build/ref/css'
}

task copyJS(type: Copy) {
  from 'js'
  into 'build/ref/js'
}

task copyImages(type: Copy) {
  from 'img'
  into 'build/ref/img'
}

task makeReference(dependsOn: [formatBook,copyCSS,copyJS,copyImages]) {
  // nop
}

task zipDist(dependsOn: makeReference, type: Zip) {
  from('build/ref')
  into 'xmlcalabash-ref-' + version
  archiveName 'xmlcalabash-ref-' + version + ".zip"
}

task dist(dependsOn: zipDist) << {
  // nop
}
