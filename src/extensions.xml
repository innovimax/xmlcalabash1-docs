<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="extensions" version="5.0">
<title>Extensions</title>

<section xml:id="extprop">
<title>System property extensions</title>

<para><citetitle>XML Calabash</citetitle> supports several additional
property names in <function>p:system-property</function>:
</para>

<variablelist>
<varlistentry><term>cx:transparent-json</term>
<listitem>
<para>Returns “<literal>true</literal>” if the
<link linkend="ext.transparent-json">transparent JSON</link> extension
is enabled, “<literal>false</literal>” otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:json-flavor</term>
<listitem>
<para>Returns the flavor of JSON returned by the transparent JSON extension,
if it's enabled.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:general-values</term>
<listitem>
<para>Returns “<literal>true</literal>” if the
<link linkend="ext.general-values">general values</link> extension
is enabled, “<literal>false</literal>” otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:xpointer-on-text</term>
<listitem>
<para>Returns “<literal>true</literal>” if the
<link linkend="ext.xpointer-on-text">XPointer on text</link> extension
is enabled, “<literal>false</literal>” otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:use-xslt-1.0</term>
<listitem>
<para>Returns “<literal>true</literal>” if the
<link linkend="ext.use-xslt-10">Use XSLT 1.0</link> extension
is enabled, “<literal>false</literal>” otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:html-serializer</term>
<listitem>
<para>Returns “<literal>true</literal>” if the
<link linkend="ext.html-serializer">HTML serializer</link> extension
is enabled, “<literal>false</literal>” otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:saxon-version</term>
<listitem>
<para>Returns the version of the underlying Saxon processor.
</para>
</listitem>
</varlistentry>
<varlistentry><term>cx:saxon-edition</term>
<listitem>
<para>Returns the edition of the underlying Saxon processor (“he”, “pe”, or “ee”).
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="extattr">
<title>Extension Attributes</title>

<para><citetitle>XML Calabash</citetitle> supports an extension attribute
<tag class="attribute">cx:depends-on</tag> to provide finer grained control
over the dependencies between steps. Consider the following example:</para>

<mediaobject>
<imageobject>
<imagedata fileref="../img/depends.png"/>
</imageobject>
</mediaobject>

<para>Because step “C” depends on steps “A” and “B”, you can be sure
that step “C” will run after “A” and “B”. (If Calabash was a
multi-threaded, streaming implementation, the constraint would be
weaker.) But what about steps “A” and “B”?</para>

<para>Because neither step depends (directly or indirectly) on the output
of the other, there is no guarantee about the order in which they will
be evaluated.</para>

<para>If step “B” relies on some side effect of step “A” (perhaps “A” calls
a web service or writes a document to disk and “B” relies on this having already
happened for its correct operation), then you need a way to force the ordering.</para>

<para>It's best if this can be accomplished by establishing an input/output dependency,
reading an output of “A” in the evaluation of “B”.</para>

<para>However, if you can't easily arrange an input/output dependency and you're not
concerned about introducing an implementation dependency into your pipeline, you
can establish the relationship directly by adding</para>

<programlisting>cx:depends="A"</programlisting>

<para>as an extension attribute on “B”. That informs <citetitle>XML Calabash</citetitle>
that the evaluation of “A” <emphasis>must</emphasis> precede the evaluation
of “B”. The value of <tag class="attribute">cx:depends</tag> is a space-separated
list of step names.</para>

<para>It is an error if the use of <tag class="attribute">cx:depends</tag> introduces
a circular dependency into the pipeline.</para>

<para>FIXME: Also document
<tag class="attribute">cx:logstyle</tag>.</para>
</section>

<section xml:id="langext">
<title>Language Extensions</title>

<para><citetitle>XML Calabash</citetitle> has three language extensions:
“general values”, “XPointer on text”, and “transparent JSON”. Enabling
any of these extensions makes the processor <emphasis>non-conformant</emphasis>.
Pipelines that rely on these extensions are not likely to be
interoperable with other implementations. You're encouraged to avoid
them if possible. That said, they can be very useful.</para>

<section xml:id="ext.general-values">
<title>General values extension</title>

<para>If the general values extension is enabled, variables, options,
and parameters are not limited to strings. If the select expression
that establishes the value of a variable, option, or parameter selects
nodes from a tree, then those node values will be passed along as the
value.</para>

<para>Consider the pipeline in <xref linkend="ex-gv-1"/>:</para>

<example xml:id="ex-gv-1">
<title>Pipeline that exploits the general values extension</title>
<programlisting language="xml"><xi:include href="examples/general-values.xpl" parse="text"/></programlisting>
</example>

<para>In a conformant processor, the <parameter>text</parameter> parameter passed to the
<tag>p:xslt</tag> step is a string:</para>

<informalexample>
<programlisting language="xml"><xi:include href="results/general-values-false.xml" parse="text"/></programlisting>
</informalexample>

<para>If the general values extension is enabled, the value contains the selected subtree:</para>

<informalexample>
<programlisting language="xml"><xi:include href="results/general-values-true.xml" parse="text"/></programlisting>
</informalexample>

<para>The general values extension can be enabled in three ways:</para>

<orderedlist>
<listitem>
<para>With the <literal>-Xgeneral-values</literal> command-line option.</para>
</listitem>
<listitem>
<para>With the <literal>com.xmlcalabash.general-values</literal> Java system property.</para>
</listitem>
<listitem>
<para>Or with the <literal>&lt;extension name="general-values" value="true"/&gt;</literal>
configuration option.</para>
</listitem>
</orderedlist>

<para>A pipeline can test whether the general values extension is enabled or not with the
<function>p:system-property</function> function using the argument
<literal>cx:general-values</literal>.</para>

</section>
<section xml:id="ext.xpointer-on-text">
<title>XPointer on text</title>

<para>If the XPointer on text extension is enabled, the <tag class="attribute">xpointer</tag>
attribute on an XInclude element can be used when <literal>parse="text"</literal>. The XPointer
must use the <literal>text()</literal> scheme and must contain an
<link xlink:href="https://tools.ietf.org/html/rfc5147">RFC 5147</link> fragment identifier.
Consider
the following DocBook XML fragment:</para>

<programlisting language="xml"><![CDATA[<programlisting>
<xi:include href="examples/general-values.xpl" parse="text"
            xpointer="text(line=6,15;length=1081)"/>
</programlisting>]]></programlisting>

<para>If processed with the XPointer on text extension enabled, it would produce effectively the following
result:</para>

<programlisting language="xml">&lt;programlisting>&lt;![CDATA[
<xi:include href="examples/general-values.xpl" parse="text"
            xpointer="text(line=5,14;length=1081)"/>]]&gt;&lt;/programlisting&gt;</programlisting>

<para>Only the “length” integrity check is supported.</para>

<para>The XPointer on text extension can be enabled in three ways:</para>

<orderedlist>
<listitem>
<para>With the <literal>-Xxpointer-on-text</literal> command-line option.</para>
</listitem>
<listitem>
<para>With the <literal>com.xmlcalabash.xpointer-on-text</literal> Java system property.</para>
</listitem>
<listitem>
<para>Or with the <literal>&lt;extension name="xpointer-on-text" value="true"/&gt;</literal>
configuration option.</para>
</listitem>
</orderedlist>

<para>A pipeline can test whether the XPointer on text extension is enabled or not with the
<function>p:system-property</function> function using the argument
<literal>cx:xpointer-on-text</literal>.</para>

</section>
<section xml:id="ext.transparent-json">
<title>Transparent JSON</title>

<para>If the transparent JSON extension is enabled,
<tag>p:http-request</tag>, <tag>p:store</tag>, <tag>p:document</tag>,
and <tag>p:data</tag> will translate automatically between JSON and
XML. If JSON is returned by a web service or loaded, it will be turned
into XML. If a JSON-in-XML document is sent or stored, it will be
turned into textual JSON first.</para>

<para>Consider this JSON object:</para>

<programlisting language="javascript"><xi:include href="examples/object.json" parse="text"/></programlisting>

<para>It can be translated into any one of five XML representations:</para>

<variablelist>
<varlistentry><term><literal>marklogic</literal></term>
<listitem>
<programlisting language="xml"><xi:include href="results/json-marklogic.xml" parse="text"/></programlisting>
</listitem>
</varlistentry>
<varlistentry><term><literal xlink:href="https://tools.ietf.org/html/draft-rsalz-jsonx-00">jsonx</literal></term>
<listitem>
<programlisting language="xml"><xi:include href="results/json-jsonx.xml" parse="text"/></programlisting>
</listitem>
</varlistentry>
<varlistentry><term><literal xlink:href="http://xml.calldei.com/JsonXML">jxml</literal></term>
<listitem>
<programlisting language="xml"><xi:include href="results/json-jxml.xml" parse="text"/></programlisting>
</listitem>
</varlistentry>
<varlistentry><term><literal>calabash</literal></term>
<listitem>
<programlisting language="xml"><xi:include href="results/json-calabash.xml" parse="text"/></programlisting>
</listitem>
</varlistentry>
<varlistentry><term><literal>calabash-deprecated</literal></term>
<listitem>
<programlisting language="xml"><xi:include href="results/json-calabash-deprecated.xml" parse="text"/></programlisting>
<para>This was the original format introduced when JSON support was added to
<tag>p:unescape-markup</tag>. Don't use it. Automatic conversion from XML to JSON is not
supported for this format.</para>
</listitem>
</varlistentry>
</variablelist>

<para>Note that key values in a JSON object are considered unordered. There's
no way to preserve the order of keys when switching between representations.</para>

<para>The transparent JSON extension can be enabled in three ways:</para>

<orderedlist>
<listitem>
<para>With the <literal>-Xtransparent-json</literal> command-line option.</para>
</listitem>
<listitem>
<para>With the <literal>com.xmlcalabash.transparent-json</literal> Java system property.</para>
</listitem>
<listitem>
<para>Or with the <literal>&lt;extension name="transparent-json" value="true"/&gt;</literal>
configuration option.</para>
</listitem>
</orderedlist>

<para>A pipeline can test whether the transparent JSON extension is enabled or not with the
<function>p:system-property</function> function using the argument
<literal>cx:transparent-json</literal>.</para>

<para>The desired XML flavor can be selected using the same mechanisms:</para>

<orderedlist>
<listitem>
<para>With the <literal>-Xjson-flavor=<replaceable>flavor</replaceable></literal> command-line option.</para>
</listitem>
<listitem>
<para>With the <literal>com.xmlcalabash.json-flavor</literal> Java system property.</para>
</listitem>
<listitem>
<para>Or with the <literal>&lt;extension name="json-flavor" value="<replaceable>flavor</replaceable>"/&gt;</literal>
configuration option.</para>
</listitem>
</orderedlist>

<para>The flavors are “<literal>marklogic</literal>”, “<literal>jsonx</literal>”,
“<literal>jxml</literal>”, “<literal>calabash</literal>”, and
“<literal>calabash-deprecated</literal>”.</para>

<para>A pipeline can determine the current flavor with the
<function>p:system-property</function> function using the argument
<literal>cx:json-flavor</literal>.</para>
</section>

<section xml:id="ext.use-xslt-10">
<title>Use XSLT 1.0</title>

<para>The “use XSLT 1.0” extension enables processing of XSLT 1.0 stylesheets
with an XSLT 1.0 processor. See <xref linkend="p-xslt-ext"/> in
<xref linkend="p-xslt"/>.</para>

<para>The XSLT 1.0 extension can be enabled in three ways:</para>

<orderedlist>
<listitem>
<para>With the <literal>-Xuse-xslt-10</literal> command-line option.</para>
</listitem>
<listitem>
<para>With the <literal>com.xmlcalabash.use-xslt-10</literal> Java system property.</para>
</listitem>
<listitem>
<para>Or with the <literal>&lt;extension name="use-xslt-10" value="true"/&gt;</literal>
configuration option.</para>
</listitem>
</orderedlist>
</section>

<section xml:id="ext.html-serializer">
<title>HTML serializer</title>

<para>If the “HTML serializer” extension is used, then all documents
that are serialized with the “html” method will be serialized with the
<link xlink:href="http://about.validator.nu/">Validator.nu</link>
HTML serializer.</para>

<para>The HTML serializer extension can be enabled in three ways:</para>

<orderedlist>
<listitem>
<para>With the <literal>-Xhtml-serializer</literal> command-line option.</para>
</listitem>
<listitem>
<para>With the <literal>com.xmlcalabash.html-serializer</literal> Java system property.</para>
</listitem>
<listitem>
<para>Or with the <literal>&lt;extension name="html-serializer" value="true"/&gt;</literal>
configuration option.</para>
</listitem>
</orderedlist>

<para>A few points:</para>

<orderedlist>
<listitem>
<para>This option serializes all HTML documents with the HTML serializer;
it pays no attention to the version.</para>
</listitem>
<listitem>
<para>If the Saxon configured serializer doesn't have any output destination
(or if it has an unrecognized output destination), then this option has
no effect. (I'm not sure it's possible to configure the Saxon serializer
this way, but maybe if you're playing in the APIs…)</para>
</listitem>
<listitem>
<para>None of the other output options (indent, doctype, etc.) have any
effect when the HTML serializer is used.</para>
</listitem>
</orderedlist>
</section>
</section>

<section xml:id="extfunc">
<title>Extension functions</title>

<para><citetitle>XML Calabash</citetitle> supports one extension
function.</para>

<variablelist>
<varlistentry>
<term><function>pxf:cwd()</function></term>
<listitem>
<para>The <function>cwd</function> function returns the “current
working directory” of the processor. This function takes no arguments
and does not depend on the context.</para>

<para>There are no XML Calabash steps that change the working
directory, so this function is likely to return the same value every
time it is called. However, there is nothing which prevents an
extension step from being defined which changes the current working
directory, so it is not necessarily the case that the same value will
always be returned.</para>
</listitem>
</varlistentry>
</variablelist>

</section>

<section xml:id="user-extfunc">
<title>User defined extension functions</title>

<para>When <citetitle>XML Calabash</citetitle> is used with
<citetitle>Saxon EE</citetitle> (and only EE, other editions do not
support separate compilation), you can load user defined functions
written in XSLT or XQuery with the <tag>cx:import</tag> extension.</para>

<programlisting>&lt;cx:import namespace="<replaceable>namespace-uri</replaceable>“
           href="<replaceable>module-file</replaceable>"
           type="<replaceable>content-type</replaceable>"/></programlisting>

<variablelist>
<varlistentry>
<term><replaceable>namespace-uri</replaceable></term>
<listitem>
<para>The module namespace declared in the library module. (This attribute
is only necessary for loading XQuery functions.)</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>module-file</replaceable></term>
<listitem>
<para>The URI of the module file or stylesheet.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>content-type</replaceable></term>
<listitem>
<para>The type of extensions you are trying to load,
<literal>application/xquery</literal> or <literal>application/xml+xslt</literal>.</para>
</listitem>
</varlistentry>
</variablelist>

<para>These extension functions are then available in XPath expressions.</para>

<para>For example, if <filename>f.xqy</filename> contains:</para>

<programlisting>xquery version "1.0";

module namespace f="http://xmlcalabash.com/ns/functions";

declare default function namespace "http://www.w3.org/2005/xpath-functions";

declare function f:count(
  $seq as item()*
) as xs:integer
{
  count($seq)
};</programlisting>

<para>Then this pipeline will run:</para>

<programlisting><![CDATA[<p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:cx="http://xmlcalabash.com/ns/extensions"
                xmlns:f="http://xmlcalabash.com/ns/functions"
                xmlns:c="http://www.w3.org/ns/xproc-step"
                version="1.0" exclude-inline-prefixes="c">
   <p:output port="result">
     <p:pipe step="params" port="result"/>
   </p:output>

   <cx:import namespace="http://xmlcalabash.com/ns/functions" href="f.xqy"/>

   <p:parameters name="params">
     <p:input port="parameters">
       <p:empty/>
     </p:input>
     <p:with-param name="three" port="parameters" select="f:count((1,2,3))"/>
   </p:parameters>
</p:declare-step>]]></programlisting>

<para>and produce output something like this:</para>

<programlisting><![CDATA[<c:param-set xmlns:c="http://www.w3.org/ns/xproc-step">
  <c:param name="three" namespace="" value="3"/>
</c:param-set>]]></programlisting>

<para>At present, the dynamically loaded functions are not scoped in any way.
They're available globally after they've been loaded.</para>

</section>

<section xml:id="extsteps">
<title>Extension steps</title>

<para><citetitle>XML Calabash</citetitle> supports a repertoire of extension
steps (<link xlink:href="pxp-steps.html">EXProc</link>
and <link xlink:href="cx-steps.html">implementation-specific</link>).
You can declare all of them in one fell swoop by
importing the following library:</para>

<programlisting><![CDATA[<p:import href="http://xmlcalabash.com/extension/steps/library-1.0.xpl"/>]]></programlisting>

<para>Importing this library <emphasis>does not</emphasis> require network
access. An internal version of the library is automatically imported when this
URI is referenced <emphasis>in a <tag>p:import</tag> statement</emphasis>.</para>
</section>

</chapter>
